package ${packageName}.controller;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.crisn.common.annotation.Log;
import com.crisn.common.core.controller.BaseController;
import com.crisn.common.core.domain.AjaxResult;
import com.crisn.common.core.page.PageDomain;
import com.crisn.common.core.page.TableSupport;
import com.crisn.common.enums.BusinessTypeEnum;
import com.crisn.common.utils.crisn.WrapperUtil;
import com.crisn.common.utils.poi.ExcelUtil;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.${ClassName}Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.util.Arrays;
import java.util.List;

/**
 * ${functionName}-Controller
 *
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController {

    @Autowired
    private ${ClassName}Service ${className}Service;

    /**
     * 分页-${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:page')")
    @GetMapping("/page")
    public IPage<${ClassName}> page(${ClassName} ${className}) {
        PageDomain domain = TableSupport.buildPageRequest();
        Page<${ClassName}> page = new Page<>(domain.getPageNum(), domain.getPageSize());
        QueryWrapper<${ClassName}> wrapper = WrapperUtil.entityToWrapper(${className});
        return ${className}Service.page(page, wrapper);
    }

    /**
     * 列表-${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:list')")
    @GetMapping("/list")
    public AjaxResult list(${ClassName} ${className}) {
        QueryWrapper<${ClassName}> wrapper = WrapperUtil.entityToWrapper(${className});
        List<${ClassName}> list = ${className}Service.list(wrapper);
        return AjaxResult.success(list);
    }

    /**
     * 导出-${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:exp')")
    @Log(title = "${functionName}" , businessType = BusinessTypeEnum.EXPORT)
    @PostMapping("/exp")
    public void exp(HttpServletResponse response, ${ClassName} ${className}) {
        QueryWrapper<${ClassName}> wrapper = WrapperUtil.entityToWrapper(${className});
        List<${ClassName}> list = ${className}Service.list(wrapper);
        ExcelUtil<${ClassName}> util = new ExcelUtil<${ClassName}>(${ClassName}. class);
        util.exportExcel(response, list, "${functionName}数据");
    }

    /**
     * 获取-${functionName}详细信息
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:get')")
    @GetMapping("/{${pkColumn.javaField}}")
    public AjaxResult get(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
        return AjaxResult.success(${className}Service.getById(${pkColumn.javaField}));
    }

    /**
     * 新增-${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:add')")
    @Log(title = "${functionName}" , businessType = BusinessTypeEnum.INSERT)
    @PostMapping
    public AjaxResult add(@RequestBody ${ClassName} ${className}) {
        return toAjax(${className}Service.save(${className}));
    }

    /**
     * 修改-${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:edit')")
    @Log(title = "${functionName}" , businessType = BusinessTypeEnum.UPDATE)
    @PutMapping
    public AjaxResult edit(@RequestBody ${ClassName} ${className}) {
        return toAjax(${className}Service.updateById(${className}));
    }

    /**
     * 删除-${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:del')")
    @Log(title = "${functionName}" , businessType = BusinessTypeEnum.DELETE)
    @DeleteMapping("/{${pkColumn.javaField}s}")
    public AjaxResult del(@PathVariable ${pkColumn.javaType}[] ${pkColumn.javaField}s) {
        return toAjax(${className}Service.removeByIds(Arrays.asList(${pkColumn.javaField}s)));
    }
}